*자료형 : 모든? 한글로 쳤을때 자음, 모음
	(ex. ㅎ ㅏ ㄴ = 한)
*자료형
	-숫자형(int) : 1,2,3,4, ..., [사칙연산](+-*/), **=제곱, //=몫의 결과값(ex 5//3=1),  %=나머지(ex 5%3=2)
		-변수 선언 : (ex x=1 ) -> (print(x) = 1)
	-문자형(str) : abcdefg.....
		-변수 선언 : (ex coompany="bit") -> (print(company) = bit
		-"" 표시 원할 때는 '' , ''표시 원할때는"" : (ex print('1+1="2") -> 1+1="2" // print("1+1="2"")!!ERROR!!
		-문자열 : print(변수, +변수 or int값,*int값)
		-""", '''' :  줄입력.
		-\n : 줄바꿈 (ex(r = "hi\n).
		-\t : tab.
		-\\ : \ 표시.
		-문자형+숫자형 출력불가.
	-출력
		-"%d" %변수 : 숫자형 변수 출력. ex(print("%d" %변수) = 변수값 출력. print("%d+%d" %(변수, 변수))
			!!!!%숫자d = 숫자자릿수 결정 ex(print("%4d" %12) ->   12
			!!!!%d갯수에 맞게 %변수 삽입 필수
			!!!!%d는 정수형에만 사용이 가능하다, 소수점은 %f를 붙여줄 것. ex[print("%f" %(1/3))] + [%숫자.숫자f = 소수점 구분]
		-"%s" %변수 : 문자형 변수 출력.
		-변수[숫자] : 변수결과값의 순서 배출 ex.(company = kakao 선언), print(company[0]) -> k
		-"%c" %변수[숫자] : 한글자 출력. (c=char=character)
		-print(f ...) : print(f"{a} + {a} = {a+a}") => 변수(int,str 상관x) 바로 입력.
			!!!![파이썬 3.6 이상부터 가능]
			!!!!f는 나중에 익숙해지고 %d,s 위주로 사용하는게 좋음.
			!!!!-print("name : " + name +", age : "+"%d" %age)
			!!!!-print(f"name : {name}, age : {age}")
		-print(변수.find("철자") = 철자 위치 찾기.
		-print(변수.index("철자") = 철자 위치 찾기.
		-print(변수[정수형변수]) = 철자 위치 찾기.
		-print(변수.count("철자") = 철자 갯수.
			!!!!print(변수.count("") = 철자 총갯수. 계산 방식은 철자 사이의 공백갯수.
		-print(len(변수)) = 변수결과값의 길이. 컴퓨터 = 0부터 시작 // 사람 = 1부터 시작. [length]

	-딕셔너리(dictionary)
		- 변수 = {값:내용} ex(person = {'name':"kim",'age':10})
		- print(변수["내부값"]) ex[person = {'name':"kim",'age':10}]
		- print(변수.get("값"))
 		- print(변수.keys()) 키값 확인
		- print(변수.values()) 밸류값 확인
		- { key : value }
		-딕셔너리 키,밸류 추가 변수["키"} = 밸류 ex(person["company"] = "kakao"
	-리스트(list)
		-list[딕셔너리값1,딕셔너리값2,딕셔너리값3,딕셔너리값4]
		person = {'name':"kim"}
		person2 = {'name' :"lim"}
		tmp = [person,person2] 
		[{'name': 'kim'}, {'name': 'lim'}]
		print(tmp[0].get("name"))
		person3 = {'name':"park"}
		tmp.append(person3) = 리스트 추가
		[{'name': 'kim'}, {'name': 'lim'}, {'name': 'park'}]
		tmp.remove(person3) = del tmp[2] = 리스트 삭제
		[{'name': 'kim'}, {'name': 'lim'}]

		num_list.sort() = 숫자 정렬.
		num_list.reverse() = 숫자 역정렬.
		num_list.insert(인덱스,값) = 원하는 순서에 값 삽입.
		print(num_list[:값]) = 값 미만까지만 결과 출력.
		print(num_list[값1:값2]) = 값1부터 값2미만까지만 결과 출력.
		>>> num_list
		[56, 54, 45, 45, 3, 3, 3, 2, 2, 4, 4, 1]
		>>> print(num_list[3:5])
		[45, 3]
		>>> print(num_list[:5])
		[56, 54, 45, 45, 3]
		>>> print(num_list[3:])
		[45, 3, 3, 3, 2, 2, 4, 4, 1]

		>>> person = {'name':"kim"}
		>>> person1 = {'name':"park"}
		>>> person2 = {'name':"lee"}
		>>> tmp = [person,person1,person2]
		>>> tmp[0]
		{'name': 'kim'}
		>>> person['name']="jung"
		>>> tmp[0]
		{'name': 'jung'}

		리스트이름 = 리스트이름2.copy 복사.
		리스트.append , 리스트이름 = 리스트이름2.copy 복사. id 별로 바뀌는 형식이 달라짐.
		(깊은복사,얕은복사)

	-튜플()
		-() 읽기전용 수정불가.

		>>> a=(1,2,3)
		>>> a[0]
		1

	-set{}
		-{} 중복불가. 순서배치가없음. a[012345] 등 불가.
		-.add
		>>> tmp = [1,2,3,3,2,1,0]
		>>> a = set(tmp) =리스트 set으로 변환
		>>> a
		{0, 1, 2, 3}
		set() , list()
		-중복 제거 할 때 사용.
		-set끼리 -(차집합), |(합집합), &(교집합) 이용해서 중복제거한뒤 결과 표시.
		-a.update([4,5,6,7]) 여러개 추가시
		-a.remove(숫자) 삭제.
	
	-불(boolean) = bool
		-true or false 만 존재
		-첫글자 대문자
		-1<2  이런거.

	- = 선언 == 일반= 부등호 <= >= =이 뒤에 붙어야함.

	-파이썬의 특징
		-스크립트 언어(인터프리터 방식 = 마지막 명령으로 적용됨.)
			a=1
			a=2
			b=2
			c=3
			a=3
			print(a) -> 3
		-동적 타이핑(숫자형, 문자형 선언 필요x 자동으로 선언) 장점이자 단점 자동선언이기에,
			a=1
			b="hi"
			print(a+b) = ERROR!!!!!!!!
		-플랫폼 독립적
			OS(window,linux[서버용],mac) 상관없음.

